name: Tests

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  tests:
    env:
      NPROC: 2

    strategy:
      fail-fast: false
      matrix:
        cache_nonce: [ 17 ]
        # next gen nimble is presently not compatible with Nim 1.2.x and 1.4.x
        # see: https://forum.nim-lang.org/t/8669
        # nim_version: [ 1.2.14, 1.4.8, 1.6.0 ]
        nim_version: [ 1.6.0 ]
        platform:
          - {
            icon: 🍎,
            os: macos,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🐧,
            os: ubuntu,
            shell: bash --noprofile --norc -eo pipefail
          }
          - {
            icon: 🏁,
            os: windows,
            shell: msys2
          }

    name: ${{ matrix.platform.icon }} ${{ matrix.platform.os }} - Nim v${{ matrix.nim_version }}

    runs-on: ${{ matrix.platform.os }}-latest

    defaults:
      run:
        shell: ${{ matrix.platform.shell }} {0}

    steps:
      - name: Install tools and libraries via APT (Linux)
        if: matrix.platform.os == 'ubuntu'
        run: |
          sudo apt install -y valgrind

      - name: Install tools and libraries via Homebrew (macOS)
        if: matrix.platform.os == 'macos'
        run: |
          brew install coreutils gawk

      - name: Install tools and libraries via MSYS2 (Windows)
        if: matrix.platform.os == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: >
            base-devel
            git
            mingw-w64-ucrt-x86_64-toolchain

      - name: Checkout sources from GitHub
        uses: actions/checkout@v2

      - name: Calculate cache key segment from hash of project .nimble
        id: calc-hash
        run: |
          echo "::set-output name=sha1::$(sha1sum *.nimble | awk '{print $1}')"

      - name: Calculate cache member paths
        id: calc-paths
        run: |
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            echo "::set-output name=choosenim::$(cygpath -m "${USERPROFILE}")/.choosenim"
            echo "::set-output name=nimble::$(cygpath -m "${HOME}")/.nimble"
          else
            echo "::set-output name=choosenim::${HOME}/.choosenim"
            echo "::set-output name=nimble::${HOME}/.nimble"
          fi

      - name: Restore choosenim and Nim tooling from cache
        id: choosenim-nim-tooling-cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.calc-paths.outputs.choosenim }}
            ${{ steps.calc-paths.outputs.nimble }}/bin
            ${{ steps.calc-paths.outputs.nimble }}/pkgs2-NODELETE
          key: ${{ matrix.platform.os }}-nim_version:${{ matrix.nim_version }}-dot_nimble_hash:${{ steps.calc-hash.outputs.sha1 }}-cache_nonce:${{ matrix.cache_nonce }}

      - name: Setup ~/.bash_env
        run: |
          echo 'export NIMBLE_DIR="${HOME}/.nimble"' >> "${HOME}/.bash_env"
          echo 'export PATH="${NIMBLE_DIR}/bin:${PATH}"' >> "${HOME}/.bash_env"

      - name: Install choosenim and Nim tooling
        if: steps.choosenim-nim-tooling-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${HOME}/Downloads"
          cd "${HOME}/Downloads"
          curl https://nim-lang.org/choosenim/init.sh -sSf -O
          chmod +x init.sh
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mkdir -p "$(cygpath "${USERPROFILE}")/.nimble/bin"
          fi
          CHOOSENIM_CHOOSE_VERSION=${{ matrix.nim_version }} ./init.sh -y
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            mv "$(cygpath "${USERPROFILE}")/.nimble" "${HOME}/"
          fi
          source "${HOME}/.bash_env"
          # install nimble@#head via nimble shipped with Nim v${{ matrix.nim_version }}
          nimble --accept install nimble@#head
          cd "${NIMBLE_DIR}/bin"
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            rm -rf nimble nimble.cmd nimble.exe
            cp ../pkgs/nimble-*/nimble.exe nimble.exe
          else
            rm -rf nimble
            ln -s ../pkgs/nimble-*/nimble nimble
          fi
          # install nimble@#head via nimble@#head
          nimble --accept install nimble@#head
          cd "${NIMBLE_DIR}"
          mkdir -p pkgs2-NODELETE
          mv pkgs2/nimble-* pkgs2-NODELETE/
          cd bin
          if [[ ${{ matrix.platform.os }} = windows ]]; then
            rm -rf nimble nimble.cmd nimble.exe
            cp ../pkgs2-NODELETE/nimble-*/nimble.exe nimble.exe
          else
            rm -rf nimble
            ln -s ../pkgs2-NODELETE/nimble-*/nimble nimble
          fi
          cd ..
          rm -rf pkgs && mkdir -p pkgs

      - name: Install project dependencies
        run: |
          source "${HOME}/.bash_env"
          nimble --accept install

      - name: Build and run tests
        run: |
          source "${HOME}/.bash_env"
          NIMBLE_PKGS="${NIMBLE_DIR}/pkgs2" nimble test

      - name: Build and run helgrind tasks (Linux)
        if: matrix.platform.os == 'ubuntu'
        run: |
          source "${HOME}/.bash_env"
          NIMBLE_PKGS="${NIMBLE_DIR}/pkgs2" nimble helgrind_achannels
